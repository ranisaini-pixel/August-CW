"use strict";
// Minimal default profanity and sensitive words list.
// Keep short and focused to reduce false positives; allow users to extend/override.
// This list targets English only. Consumers can provide their own lists for other locales.
Object.defineProperty(exports, "__esModule", { value: true });
exports.buildProfanityFilter = exports.DEFAULT_PROFANITY = void 0;
exports.DEFAULT_PROFANITY = [
    // hardcore slurs not included to avoid propagating them in source; focus on common obvious ones
    "ass",
    "asses",
    "asshole",
    "bastard",
    "bitch",
    "bloody",
    "bollocks",
    "bugger",
    "cock",
    "cocks",
    "cocksucker",
    "crap",
    "cunt",
    "damn",
    "dick",
    "douche",
    "dumb",
    "dumber",
    "dumbest",
    "fag",
    "faggot",
    "fuck",
    "fucked",
    "fucker",
    "fucking",
    "goddam",
    "goddamn",
    "goddamned",
    "hell",
    "jerk",
    "moron",
    "nazi",
    "nuts",
    "piss",
    "pisser",
    "pissing",
    "prick",
    "retard",
    "shit",
    "shitty",
    "slut",
    "tits",
    "twat",
    "wanker"
];
function buildProfanityFilter(blocklist, options) {
    var _a;
    const normalized = blocklist
        .filter(Boolean)
        .map((w) => w.trim().toLowerCase())
        .filter((w) => w.length > 0);
    const unique = Array.from(new Set(normalized));
    const useSubstring = (options === null || options === void 0 ? void 0 : options.matchSubstrings) === true;
    const boundary = (_a = options === null || options === void 0 ? void 0 : options.wordBoundary) !== null && _a !== void 0 ? _a : "(?:^|[^a-z0-9])(?:%s)(?:$|[^a-z0-9])";
    const patterns = unique.map((token) => {
        const escaped = token.replace(/[.*+?^${}()|[\]\\]/g, "\\$&");
        if (useSubstring) {
            return new RegExp(escaped, "i");
        }
        const pattern = boundary.replace("%s", escaped);
        return new RegExp(pattern, "i");
    });
    return (word) => {
        if (!word)
            return false;
        const text = String(word).toLowerCase();
        return patterns.some((rx) => rx.test(text));
    };
}
exports.buildProfanityFilter = buildProfanityFilter;
